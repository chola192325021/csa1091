%{
#include <stdio.h>
%}

%%
"//".* { printf("Single-line comment: %s\n", yytext); }
"/*"([^*]|\*+[^*/])*\*+"/" { printf("Multi-line comment: %s\n", yytext); }
. ;
%%

int main() {
    yylex();
    return 0;
}

int yywrap() {
    return 1;
}

#include <stdio.h>
#include <string.h>

struct Symbol {
    char name[20];
    int address;
} table[100];

int count = 0;

void insert(char name[], int address) {
    strcpy(table[count].name, name);
    table[count].address = address;
    count++;
}

void display() {
    printf("Symbol Table:\n");
    for (int i = 0; i < count; i++)
        printf("%s -> %d\n", table[i].name, table[i].address);
}

int main() {
    insert("x", 1000);
    insert("y", 1004);
    display();
    return 0;
}

%{
#include <stdio.h>
%}

%%
[><=!]=? { printf("Relational operator: %s\n", yytext); }
[a-zA-Z]+ { printf("Word: %s\n", yytext); }
. ;
%%

int main() {
    yylex();
    return 0;
}

int yywrap() {
    return 1;
}

%{
#include <stdio.h>
int macros = 0, headers = 0;
%}

%%
"#define".* { macros++; }
"#include".* { headers++; }
. ;
%%

int main() {
    yylex();
    printf("Macros: %d\nHeader files: %d\n", macros, headers);
    return 0;
}

int yywrap() {
    return 1;
}
